<?php
/**
 * @author      Steven To <cho88hk@gmail.com>
 */
namespace common\widgets;
use Yii;
use yii\helpers\Html;
use yii\widgets\LinkPager;
use yii\bootstrap\Dropdown;
class DropDownPager extends LinkPager
{
    /**
     * @inheritdoc
     */
    public function run()
    {
        if ($this->registerLinkTags) {
            $this->registerLinkTags();
        }
//        $linkOptions['data-toggle'] = 'dropdown';
//        $linkOptions['role']        = 'button';
//        Html::addCssClass($linkOptions, 'dropdown-toggle');
        $html='';
        $html = "<div class=\"btn-group dropup\" style='margin-left: 20px;'>";
        $html .= '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false">Page
                    <span class="fa fa-caret-down"></span></button>';
        $html .= Dropdown::widget([
            'items' => $this->configureItems(),
            'encodeLabels' => false,
            'options' => ['style' => 'height: auto;
                                            max-height: 200px;
                                            overflow-x: hidden;']
        ]);
        $html .="</div>";

        $html .= "<div class=\"btn-group dropup\" style='margin-left: 20px;'>";
        $html .= '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false">Size
                    <span class="fa fa-caret-down"></span></button>';
        $html .= Dropdown::widget([
            'items' => $this->configurePageSizeItems(),
            'encodeLabels' => false,
            'options' => ['style' => 'height: auto;
                                            max-height: 200px;
                                            overflow-x: hidden;']
        ]);
        $html .="</div>";

        $html .="<div class=\"btn-group\" style='margin-left: 20px;'>";
        $html .=Html::textInput('page', '' ,['title'=>'Input the page number and press Enter','placeholder'=>'Jump to page','style'=>'height:30px;width:100px;']);

        $html .="</div>";

        $url =$this->pagination->createUrl($this->pagination->getPage());
        $jumpToJs = <<<JS
        $('input[name="page"]').on('keydown', function (evt) {
            if (evt.which == 13) {
                var url = "$url";
                var targetPage =  $(this).val();
                var newUrl = url.replace(/(page=)\d/, "$1"+targetPage);
                window.location.href = newUrl;
                
                //alert(newUrl);
            }
        });
JS;
        $this->getView()->registerJs($jumpToJs);

        echo "<div class=\"row\"><div class=\"col-sm-10\"> <div class=\"btn-group\">";
        echo $this->renderPageButtons();
        echo "</div>";

        echo $html;


        echo "</div></div>";


    }
    /**
     * Renders the page buttons.
     * @return string the rendering result
     */
    protected function configureItems()
    {
        $items = [];
        $pageCount = $this->pagination->getPageCount();
        if ($pageCount < 2 && $this->hideOnSinglePage) {
            return $items;
        }
        $currentPage = $this->pagination->getPage();
        // first page
        if ($this->firstPageLabel !== false) {
            $items[] = $this->createPageItem($this->firstPageLabel, 0, $this->firstPageCssClass, $currentPage <= 0, false);
        }
        // prev page
        if ($this->prevPageLabel !== false) {
            if (($page = $currentPage - 1) < 0) {
                $page = 0;
            }
            $items[] = $this->createPageItem($this->prevPageLabel, $page, $this->prevPageCssClass, $currentPage <= 0, false);
        }
        // internal pages
        list($beginPage, $endPage) = [0, $this->pagination->getPageCount()-1];
        for ($i = $beginPage; $i <= $endPage; ++$i) {
            $items[] = $this->createPageItem($i + 1, $i, null, false, $i == $currentPage);
        }
        // next page
        if ($this->nextPageLabel !== false) {
            if (($page = $currentPage + 1) >= $pageCount - 1) {
                $page = $pageCount - 1;
            }
            $items[] = $this->createPageItem($this->nextPageLabel, $page, $this->nextPageCssClass, $currentPage >= $pageCount - 1, false);
        }
        // last page
        if ($this->lastPageLabel !== false) {
            $items[] = $this->createPageItem($this->lastPageLabel, $pageCount - 1, $this->lastPageCssClass, $currentPage >= $pageCount - 1, false);
        }
        return $items;
    }
    /**
     * Creates a configuration array for Dropdown item.
     * Refer to description for \yii\bootstrap\Dropdown::$items property.
     * @param string $label the text label for the button
     * @param integer $page the page number
     * @param string $class the CSS class for the page button.
     * @param boolean $disabled whether this page button is disabled
     * @param boolean $active whether this page button is active
     * @return array
     */

    protected function configurePageSizeItems(){
        $items = [];
        $currentPage = $this->pagination->getPage();
        $currentPageSize = $this->pagination->getPageSize();
        $items[] = $this->createPageSizeItem(10,10,null,false,$currentPageSize == 10);
        $items[] = $this->createPageSizeItem(20,20,null,false,$currentPageSize == 20);
        $items[] = $this->createPageSizeItem(40,40,null,false,$currentPageSize == 40);
        $items[] = $this->createPageSizeItem(50,50,null,false,$currentPageSize == 50);
        $items[] = $this->createPageSizeItem(100,100,null,false,$currentPageSize == 100);
        return $items;
    }

    protected function createPageSizeItem($label, $pageSize, $class, $disabled, $active)
    {
        $item = ['label' => $label];
        $options = ['class' => $class === '' ? null : $class];
        if ($active) {
            Html::addCssClass($options, $this->activePageCssClass);
        }
        if ($disabled) {
            Html::addCssClass($options, $this->disabledPageCssClass);
            $item['options'] = $options;
            return $item;
        }
        $linkOptions = $this->linkOptions;
        $item['options']     = $options;
        $item['linkOptions'] = $linkOptions;
        $item['url']         = $this->pagination->createUrl($this->pagination->getPage(),$pageSize);
        return $item;
    }
    protected function createPageItem($label, $page, $class, $disabled, $active)
    {
        $item = ['label' => $label];
        $options = ['class' => $class === '' ? null : $class];
        if ($active) {
            Html::addCssClass($options, $this->activePageCssClass);
        }
        if ($disabled) {
            Html::addCssClass($options, $this->disabledPageCssClass);
            $item['options'] = $options;
            return $item;
        }
        $linkOptions = $this->linkOptions;
        $linkOptions['data-page'] = $page;
        $item['options']     = $options;
        $item['linkOptions'] = $linkOptions;
        $item['url']         = $this->pagination->createUrl($page);
        return $item;
    }
}
